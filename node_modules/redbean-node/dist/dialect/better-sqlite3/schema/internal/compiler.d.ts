declare function compileCreateTable(ast: any, wrap?: (v: any) => any): string;
declare function compileCreateIndex(ast: any, wrap?: (v: any) => any): string;
declare function createTable(ast: any, wrap: any): string;
declare function temporary(ast: any, wrap: any): "" | " TEMP";
declare function rowid(ast: any, wrap: any): "" | " WITHOUT ROWID";
declare function columnDefinitionList(ast: any, wrap: any): any;
declare function columnDefinition(ast: any, wrap: any): string;
declare function typeName(ast: any, wrap: any): string;
declare function columnConstraintList(ast: any, wrap: any): string;
declare function primaryColumnConstraint(ast: any, wrap: any): string;
declare function autoincrement(ast: any, wrap: any): "" | " AUTOINCREMENT";
declare function notnullColumnConstraint(ast: any, wrap: any): string;
declare function nullColumnConstraint(ast: any, wrap: any): string;
declare function uniqueColumnConstraint(ast: any, wrap: any): string;
declare function checkColumnConstraint(ast: any, wrap: any): string;
declare function defaultColumnConstraint(ast: any, wrap: any): string;
declare function collateColumnConstraint(ast: any, wrap: any): string;
declare function referencesColumnConstraint(ast: any, wrap: any): string;
declare function asColumnConstraint(ast: any, wrap: any): string;
declare function tableConstraintList(ast: any, wrap: any): any;
declare function tableConstraint(ast: any, wrap: any): string | undefined;
declare function primaryTableConstraint(ast: any, wrap: any): string;
declare function uniqueTableConstraint(ast: any, wrap: any): string;
declare function conflictClause(ast: any, wrap: any): string;
declare function checkTableConstraint(ast: any, wrap: any): string;
declare function foreignTableConstraint(ast: any, wrap: any): string;
declare function foreignKeyClause(ast: any, wrap: any): string;
declare function columnNameListOptional(ast: any, wrap: any): string;
declare function columnNameList(ast: any, wrap: any): any;
declare function deleteUpdateMatchList(ast: any, wrap: any): string;
declare function deleteReference(ast: any, wrap: any): string;
declare function updateReference(ast: any, wrap: any): string;
declare function matchReference(ast: any, wrap: any): string;
declare function deferrable(ast: any, wrap: any): string;
declare function constraintName(ast: any, wrap: any): string;
declare function createIndex(ast: any, wrap: any): string;
declare function unique(ast: any, wrap: any): "" | " UNIQUE";
declare function exists(ast: any, wrap: any): "" | " IF NOT EXISTS";
declare function schema(ast: any, wrap: any): string;
declare function index(ast: any, wrap: any): any;
declare function table(ast: any, wrap: any): any;
declare function where(ast: any, wrap: any): string;
declare function indexedColumnList(ast: any, wrap: any): any;
declare function indexedColumn(ast: any, wrap: any): string;
declare function indexedColumnExpression(ast: any, wrap: any): string;
declare function collation(ast: any, wrap: any): string;
declare function order(ast: any, wrap: any): string;
declare function indexedExpression(ast: any, wrap: any): any;
declare function expression(ast: any, wrap?: undefined): any;
declare function identifier(ast: any, wrap: any): any;
